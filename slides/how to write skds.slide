How to write SKDs
Concerns & Solutions
14 Jul 2018
Tags: SDK, Library, Howto

Tobias Kommerell
t.kommerell@hotmail.com
@schinkenstrudel

* What are SKDs?
** Introduction
    - SDKs help to use APIs
    - There are SDKs for
        - Services (REST, SOAP)
        - Databases
        - Platforms
        - Operating Systems

* Concerns when building SKDs
** Introduction
    - reduce the effort to use a tool
        - you can't just import some tools, but you can import the SDK
        - using the SDK should provide a benefit over directly using the API over a standard protocol
    - don't reduce the ways in which a tool can be used
        - like any other go package a tool should do one thing only and do it well
        - an SDK should not force you to adopt specific ways of handling dependencies, logging, etc.
    - an SDK shouldn't impose any constraints on the applications using it

* Concerns of the application using the SDK
** Introduction
    - developers need observability (logging, tracing, metrics, profiling)
    - developers need tests
    - developers want applications to be fast without consuming infinite memory
    - developers don't want to have to read lots of documentation

* Undoing The API
** SDK Design
- extract "status" and "error" fields to error return values, if appropriate
- retrying requests caused by transport failure
- transform untyped payload into typed response object

* observability
** SDK Design
- most SDKs should not log anything, applications should log outside of SDK invocations
- for metrics use profiling or a very light metrics Library
- you can allow users to enable tracing via functional configuration of ...

* http Client
** Proctol Clients
- possibility 1: Use default client `http.DefaultClient`
- possibility 2: Use your own http.Client
- possibility 3: Let the application inject the http.Client
    it's easy to inject the default Client, or a special Client
.link https://github.com/xanzy/go-gitlab/blob/master/gitlab.go#L350 example

* Timeouts
** Proctol Clients
- fixed Timeouts but what's a sensible timeout?
- Do you need Timeout per request type?

.link https://blog.golang.org/context

* Connections
** Resource Management
- pool connections, buffers, ...
- expose single worker
- why not both?

* io
** Resource Managment
- benchmark everything involving buffers or io.Pipe()
- use sync.Pools

* Big no-nos
** One last thing
forget to close response bodies
.link https://github.com/dkerwin/gini-api-go/blob/master/document.go#L166 close `nil` response bodies
.link https://github.com/xanzy/go-gitlab/blob/master/repositories.go#L59 return empty results for no
.link https://github.com/alphazero/Go-Redis/blob/go1/redis.go#L114 huge interfaces
- no list of errors
- use of http.Roundtripper for authentication
- no timeout for requests by default and timeout not configurable
